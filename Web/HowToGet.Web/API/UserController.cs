using System;
using System.Collections.Generic;
using System.Linq;
using System.Net;
using System.Net.Http;
using System.Threading.Tasks;
using System.Web.Http;
using System.Web.Security;
using HowToGet.BusinessLogic.Configuration;
using HowToGet.BusinessLogic.Interfaces;
using HowToGet.BusinessLogic.Validators;
using HowToGet.Hosting.Interfaces;
using HowToGet.Models.Analytics;
using HowToGet.Models.Dictionaries;
using HowToGet.Models.Exceptions;
using HowToGet.Models.Users;
using HowToGet.Web.Filters;
using HowToGet.Web.Helpers;
using HowToGet.Web.Models;
using NLog;
using RegisterModel = HowToGet.Web.Models.RegisterModel;

namespace HowToGet.Web.API
{
	[ExceptionHandler]
	public class UserController : ApiController
	{
		private static Logger _logger;
		private static Logger CurrentLogger
		{
			get { return _logger ?? (_logger = LogManager.GetCurrentClassLogger()); }
		}

	
		#region Providers

		private readonly IUserProvider _userProvider;
		private readonly IUploadToHostingProvider _uploadProvider;
		private readonly ICityValidator _cityValidator;
		private readonly ICountryValidator _countryValidator;
		private readonly IActionEvents _actionEvents;
		//private readonly IInviteProvider _inviteProvider;

		#endregion

		public UserController(IUserProvider userProvider, IUploadToHostingProvider uploadProvider, ICityValidator cityValidator, ICountryValidator countryValidator, IActionEvents actionEvents)
		{
			_userProvider = userProvider;
			_uploadProvider = uploadProvider;
			_cityValidator = cityValidator;
			_countryValidator = countryValidator;
			_actionEvents = actionEvents;
			//_inviteProvider = inviteProvider;
		}

		// GET api/user/self
		[ActionName("self")]
		[HttpGet]
		[Authorize]
		public FullUserDataModel GetUser()
		{
			var userId = User.Identity.Name;
			var user = Membership.GetUser((object)userId, true) as MembershipUserEx;
			return new FullUserDataModel(user, ImagesConfig.Instance.VirtualImageFolderName);
		}

		// GET api/user
		[HttpGet]
		[Authorize]
		public ShortUserDataModel GetUser(string userId)
		{
			var user = Membership.GetUser((object)userId, true) as MembershipUserEx;
			return new ShortUserDataModel(user, ImagesConfig.Instance.VirtualImageFolderName);
		}

		// POST api/user
		[ActionName("register")]
		[HttpPost]
		public AuthModel Register(RegisterModel registerModel)
		{
			//if(string.IsNullOrEmpty(registerModel.InviteCode))
			//	throw new SecurityException("InviteIsEmpty");

			//string inviteId;
			//if(!_inviteProvider.CheckInviteCode(registerModel.InviteCode, out inviteId))
			//	throw new SecurityException("UnknownInviteCode");

			var isPasswordAutoGenerated = false;
			var password = string.Empty;
			if (string.IsNullOrEmpty(registerModel.Password))
			{
				password = _userProvider.GeneratePassword();
				registerModel.Password = password;
				isPasswordAutoGenerated = true;
			}

			MembershipUserEx user = null;
			try
			{
				user = Membership.CreateUser(registerModel.UserName, registerModel.Password, registerModel.Email) as MembershipUserEx;
				if (user == null || user.ProviderUserKey == null)
					throw new InternalErrorException(string.Format("User creation failed. UserData: {0}", registerModel));

				if(!isPasswordAutoGenerated)
					_userProvider.SendUserCreatedNotification(user);
				else
					_userProvider.SendUserCreatedWithPasswordNotification(user, password);

				//_inviteProvider.UseInvite(inviteId, user.ProviderUserKey.ToString());
				//_inviteProvider.GenerateInvites(user.ProviderUserKey.ToString());

				string ip = ClientHelper.GetClientIp(Request);
				var registerAction = new RegisterAction(user.ProviderUserKey.ToString(), registerModel.Referrer, ip);
				_actionEvents.OnUserAction(registerAction);

				return new AuthModel(user);
			}
			catch (MembershipCreateUserException ex)
			{
				string message = "InternalError";
				switch (ex.StatusCode)
				{
					case MembershipCreateStatus.InvalidEmail:
						message = "InvalidEmail";
						break;
					case MembershipCreateStatus.DuplicateEmail:
						message = "DuplicateEmail";
						break;
					default:
						CurrentLogger.ErrorException(string.Format("Error creating user. UserData: {0}", registerModel), ex);
						break;
				}
				throw new ValidationException(message);
			}
			catch (Exception ex)
			{
				CurrentLogger.ErrorException(string.Format("Error creating user. UserData: {0}", registerModel), ex);
				if(user != null)
					Membership.DeleteUser(user.Email);

				throw new InternalErrorException("Error register user");
			}
		}

		[ActionName("upload")]
		[HttpPost]
		[Authorize]
		public Task<HttpResponseMessage> UploadUserPic()
		{
			if (!Request.Content.IsMimeMultipartContent())
			{
				throw new UnsupportedMediaTypeException("UnsupportedMediaType");
			}

			var userId = User.Identity.Name;

			var provider = new CustomMultipartFormDataStreamProvider(ImagesConfig.Instance.ImagePath, userId);

			var task = Request.Content.ReadAsMultipartAsync(provider).
				ContinueWith(t =>
								 {
									 if (t.IsFaulted || t.IsCanceled)
									 {
										 if (t.Exception != null && t.Exception.InnerException != null
											 && (t.Exception.InnerException).InnerException != null
											 && ((t.Exception.InnerException).InnerException).InnerException != null)
										 {
											 throw ((t.Exception.InnerException).InnerException).InnerException;
										 }

										 throw new InternalErrorException(t.Exception.Message);
									 }

									 if (provider.FileData.Count != 1)
										 throw new UnsupportedMediaTypeException("OnlyOneFileIsAllowed");


									 var fileName = _uploadProvider.PrepareAndUploadImage(provider.FileData[0].LocalFileName);

									 var virtualFilePath = string.Format("{0}/{1}", ImagesConfig.Instance.VirtualImageFolderName, fileName);
									 _userProvider.UpdateUserPicture(userId, fileName);
									 return new HttpResponseMessage(HttpStatusCode.OK)
												{
													Content = new StringContent(virtualFilePath)
												};
								 });
			return task;
		}


		[ActionName("top")]
		[HttpGet]
		[Authorize]
		[WebApiOutputCache(10800)]
		public IEnumerable<ShortUserDataModel> GetTopUsers()
		{
			var users = _userProvider.GetTopUsers();
			return users.Select(user => new ShortUserDataModel(user, ImagesConfig.Instance.VirtualImageFolderName));
		}

		[HttpPatch]
		[Authorize]
		public void UpdateUserData(UserUpdateModel userData)
		{
			var userId = User.Identity.Name;
			var user = Membership.GetUser((object)userId, true) as MembershipUserEx;
			if (user == null)
				throw new InternalErrorException("UserNotFound");

			if (!string.IsNullOrEmpty(userData.UserName) && user.UserName != userData.UserName)
				_userProvider.UpdateUserName(userId, userData.UserName);
			
			if(user.Gender != GenderTypes.NotSet)
				user.Gender = userData.Gender;
			
			if(!string.IsNullOrEmpty(userData.Email))
				user.Email = userData.Email;

			if (!string.IsNullOrEmpty(userData.CityId) && !string.Equals(user.HomeCityId, userData.CityId, StringComparison.InvariantCultureIgnoreCase))
			{
				_cityValidator.ValidateCity(CityValidator.ValidateCityType.Origin, userData.CityId);
				user.HomeCityId = userData.CityId;
			}

			if (!string.IsNullOrEmpty(userData.CountryId) && !string.Equals(user.HomeCountryId, userData.CountryId, StringComparison.InvariantCultureIgnoreCase))
			{
				_countryValidator.ValidateCountry(userData.CountryId);
				user.HomeCountryId = userData.CountryId;
			}

			Membership.UpdateUser(user);
		}
	}
}
